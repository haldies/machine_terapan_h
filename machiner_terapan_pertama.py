# -*- coding: utf-8 -*-
"""machiner_terapan_pertama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W6-37o0aoDkoz81NAL6ob5T16h-3OIRe

# Predictive Analytics

## Import Semua Packages/Library yang Digunakan
"""

!pip install kaggle

import pandas as pd
import os
import numpy as np
import shutil

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.model_selection import GridSearchCV

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from xgboost import XGBClassifier

from imblearn.over_sampling import SMOTENC
from imblearn.under_sampling import RandomUnderSampler

import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import files

import warnings
warnings.filterwarnings('ignore')

"""## Data Preparation

### Data Loading
"""

files.upload()

os.makedirs('/root/.kaggle', exist_ok=True)
os.rename('kaggle.json', '/root/.kaggle/kaggle.json')

!kaggle datasets download -d taweilo/loan-approval-classification-data

!unzip /content/loan-approval-classification-data.zip -d /content/data

"""### Data Preprocessing"""

df = pd.read_csv('/content/data/loan_data.csv')
df

df.info()

df.describe()

df.shape

df.isnull().sum()

print(df.dtypes)

df = df[df['person_age'] <= 100]
df = df[df['person_emp_exp'] <= 60]
df = df[df['person_income'] <= 500000]

df.describe()

sns.set(style="whitegrid")
plt.figure(figsize=(20, 16))
plt.subplot(3, 3, 1)
sns.histplot(df['person_age'], bins=30, kde=True, color='skyblue')
plt.title("Distribusi Umur")

plt.subplot(3, 3, 3)
sns.histplot(df['person_emp_exp'], bins=30, kde=True, color='orange')
plt.title("Distribusi Pengalaman Kerja")

plt.subplot(3, 3, 4)
sns.histplot(df['loan_amnt'], bins=30, kde=True, color='red')
plt.title("Distribusi Jumlah Pinjaman")

plt.subplot(3, 3, 5)
sns.histplot(df['loan_int_rate'], bins=30, kde=True, color='purple')
plt.title("Distribusi Bunga Pinjaman")

plt.subplot(3, 3, 6)
sns.histplot(df['loan_percent_income'], bins=30, kde=True, color='teal')
plt.title("Distribusi Pinjaman vs Pendapatan")

plt.subplot(3, 3, 7)
sns.histplot(df['cb_person_cred_hist_length'], bins=30, kde=True, color='brown')
plt.title("Distribusi Panjang Riwayat Kredit")

plt.subplot(3, 3, 8)
sns.histplot(df['credit_score'], bins=30, kde=True, color='gray')
plt.title("Distribusi Skor Kredit")

plt.subplot(3, 3, 9)
sns.countplot(x='loan_status', data=df, palette='pastel')
plt.title("Distribusi Status Pinjaman")
plt.xticks([0, 1], ['Tidak Gagal Bayar', 'Gagal Bayar'])

plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 18))

plt.subplot(6, 2, 1)
sns.countplot(x='person_gender', data=df, palette='Set1')
plt.title('Distribusi Gender')

plt.subplot(6, 2, 2)
sns.countplot(x='person_education', data=df, palette='Set1')
plt.title('Distribusi Pendidikan')

plt.subplot(6, 2, 3)
sns.countplot(x='person_home_ownership', data=df, palette='Set1')
plt.title('Distribusi Kepemilikan Rumah')

plt.subplot(6, 2, 4)
sns.countplot(x='previous_loan_defaults_on_file', data=df, palette='Set1')
plt.title('Distribusi Default Pinjaman Sebelumnya')

plt.subplot(6, 2, 5)
sns.countplot(x='loan_status', data=df, palette='Set1')
plt.title('Distribusi Status Pinjaman')

plt.tight_layout()

plt.show()

plt.figure(figsize=(12, 8))
plt.subplot(6, 2, 4)
ax = sns.countplot(x='loan_intent', data=df, palette='Set1')

plt.xticks(rotation=45, ha='right')

for p in ax.patches:
    ax.annotate(f'{p.get_height()}',
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                fontsize=12, color='black',
                xytext=(0, 5), textcoords='offset points')

plt.tight_layout()

plt.ylim(0, 10000)

plt.title('Distribusi Tujuan Pinjaman')
plt.subplots_adjust(top=2.5)
plt.show()

print(df['loan_intent'].value_counts())

plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm', fmt=".2f")
plt.title("Heatmap Korelasi Antar Variabel Numerik")
plt.show()

df.corr(numeric_only=True)

print(df['loan_status'].value_counts())

df_resampled = df.copy()

label_encoder = LabelEncoder()

df_resampled['person_gender'] = label_encoder.fit_transform(df_resampled['person_gender'])
df_resampled['previous_loan_defaults_on_file'] = label_encoder.fit_transform(df_resampled['previous_loan_defaults_on_file'])

df_resampled['person_home_ownership'] = label_encoder.fit_transform(df_resampled['person_home_ownership'])

df_resampled = pd.get_dummies(df_resampled, columns=['person_education', 'loan_intent'], drop_first=True)

df_resampled

X = df_resampled.drop('loan_status', axis=1)
y = df_resampled['loan_status']

categorical_features = [2, 5]

smote_nc = SMOTENC(categorical_features=categorical_features, sampling_strategy={1: 15000}, random_state=42)

X_oversampled, y_oversampled = smote_nc.fit_resample(X, y)

undersampler = RandomUnderSampler(sampling_strategy={0: 15000}, random_state=42)
X_resampled, y_resampled = undersampler.fit_resample(X_oversampled, y_oversampled)

df_resampled = pd.DataFrame(X_resampled, columns=X.columns)
df_resampled['loan_status'] = y_resampled

print(df_resampled['loan_status'].value_counts())

df_resampled

X = df_resampled.drop(columns=['loan_status'])
y = df_resampled['loan_status']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""## Modelling"""

logreg_model = LogisticRegression(max_iter=1000, random_state=42)
logreg_model.fit(X_train, y_train)
y_pred_logreg = logreg_model.predict(X_test)
print("=== Logistic Regression (Default) ===")
print(classification_report(y_test, y_pred_logreg))

rf_model = RandomForestClassifier(random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)
print("=== Random Forest (Default) ===")
print(classification_report(y_test, y_pred_rf))

xgb_model = XGBClassifier(
    use_label_encoder=False,
    eval_metric='logloss',
    random_state=42
)
xgb_model.fit(X_train, y_train)
y_pred_xgb = xgb_model.predict(X_test)

print("=== XGBoost (Default) ===")
print(classification_report(y_test, y_pred_xgb))

"""## Improvement model dengan hyperparameter tuning"""

param_grid_logreg = {
    'C': [0.01, 0.1, 1, 10],
    'penalty': ['l2'],
    'solver': ['lbfgs', 'saga'],
    'max_iter': [500, 1000]
}

grid_logreg = GridSearchCV(
    LogisticRegression(random_state=42),
    param_grid_logreg,
    cv=5,
    scoring='f1',
    n_jobs=-1
)
grid_logreg.fit(X_train, y_train)

print("Best parameters (Logistic Regression):", grid_logreg.best_params_)
print("Best score:", grid_logreg.best_score_)

param_grid_rf = {
    'n_estimators': [100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5],
    'min_samples_leaf': [1, 4],
    'max_features': ['sqrt']
}

grid_rf = GridSearchCV(
    RandomForestClassifier(random_state=42),
    param_grid_rf,
    cv=5,
    scoring='f1',
    n_jobs=-1
)
grid_rf.fit(X_train, y_train)

print("Best parameters (Random Forest):", grid_rf.best_params_)
print("Best score:", grid_rf.best_score_)

param_grid_xgb = {
    'n_estimators': [100, 300],
    'max_depth': [3, 6, 10],
    'learning_rate': [0.01, 0.1, 0.2],
    'subsample': [0.8, 1],
    'colsample_bytree': [0.8, 1]
}

grid_xgb = GridSearchCV(
    XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42),
    param_grid_xgb,
    cv=3,
    scoring='f1',
    n_jobs=-1
)
grid_xgb.fit(X_train, y_train)

print("Best parameters (XGBoost):", grid_xgb.best_params_)
print("Best score:", grid_xgb.best_score_)

"""## Evaluasi dan Visualisasi"""

best_logreg = grid_logreg.best_estimator_
y_pred_logreg = best_logreg.predict(X_test)

print("=== Logistic Regression (Tuned) ===")
print(classification_report(y_test, y_pred_logreg))

best_rf = grid_rf.best_estimator_
y_pred_rf = best_rf.predict(X_test)

print("=== Random Forest (Tuned) ===")
print(classification_report(y_test, y_pred_rf))

best_xgb = grid_xgb.best_estimator_
y_pred_xgb = best_xgb.predict(X_test)

print("=== XGBoost (Tuned) ===")
print(classification_report(y_test, y_pred_xgb))

